[{"correct": "b", "code": "def a(b, c, d): pass", "question": "what does the following code do?", "choices": {"c": "defines a function, which passes its parameters through ", "a": "defines a list and initializes it ", "b": "defines a function, which does nothing ", "d": "defines an empty class "}, "title": "1: statements: def, pass", "description": "The 'def' statement defines a function. The 'pass' statement is a null operation."}, {"correct": "a", "code": "print type(1/2)", "question": "what gets printed? Assuming python version 2.x", "choices": {"c": "<type 'float'> ", "a": "<type 'int'> ", "b": "<type 'number'> ", "d": "<type 'double'> ", "e": "<type 'tuple'> "}, "title": "2: types", "description": "division of an integer by another integer yelds an integer in version 2.x of python"}, {"correct": "e", "code": "print type([1,2])", "question": "what is the output of the following code?", "choices": {"c": "<type 'set'> ", "a": "<type 'tuple'> ", "b": "<type 'int'> ", "d": "<type 'complex'> ", "e": "<type 'list'> "}, "title": "3: types", "description": "Lists are formed by placing a comma-separated list of expressions in square brackets"}, {"correct": "c", "code": "def f(): pass\r\nprint type(f())\r\n", "question": "what gets printed?", "choices": {"c": "<type 'NoneType'> ", "a": "<type 'function'> ", "b": "<type 'tuple'> ", "d": "<type 'str'> ", "e": "<type 'type'> "}, "title": "4: types", "description": "The argument to the type() call is a return value of a function call, which returns None"}, {"correct": "a", "code": "print type(1J)", "question": "what should the below code print?", "choices": {"c": "<type 'int'> ", "a": "<type 'complex'> ", "b": "<type 'unicode'> ", "d": "<type 'float'> ", "e": "<type 'dict'> "}, "title": "5: types", "description": "An imaginary literal yields a complex number with a real part of 0.0"}, {"correct": "d", "code": "print type(lambda:None)", "question": "what is the output of the following code?", "choices": {"c": "<type 'type'> ", "a": "<type 'NoneType'> ", "b": "<type 'tuple'> ", "d": "<type 'function'> ", "e": "<type 'bool'> "}, "title": "6: types", "description": "'lambda arguments: expression' yields a function object"}, {"correct": "d", "code": "a = [1,2,3,None,(),[],]\r\nprint len(a)", "question": "what is the output of the below program?", "choices": {"c": "5 ", "a": "syntax error ", "b": "4 ", "d": "6 ", "e": "7 "}, "title": "7: sequences", "description": "The trailing comma in the list is ignored, the rest are legitimate values"}, {"correct": "c", "code": "print (type(1/2))", "question": "what gets printed? Assuming python version 3.x", "choices": {"c": "<type 'float'> ", "a": "<type 'int'> ", "b": "<type 'number'> ", "d": "<type 'double'> ", "e": "<type 'tuple'> "}, "title": "8: types", "description": "division of an integer by another integer yelds a float in version 3.x of python.  Also note there is a changed print syntax in python 3."}, {"correct": "c", "code": "d = lambda p: p * 2\r\nt = lambda p: p * 3\r\nx = 2\r\nx = d(x)\r\nx = t(x)\r\nx = d(x)\r\nprint x\r\n", "question": "What gets printed?", "choices": {"c": "24 ", "a": "7 ", "b": "12 ", "d": "36 ", "e": "48 "}, "title": "9: lambda", "description": "start with 2, multiply by 2, multiply by 3, multipy by 2."}, {"correct": "a", "code": "x = 4.5\r\ny = 2\r\nprint x//y\r\n", "question": "What gets printed?", "choices": {"c": "9.0 ", "a": "2.0 ", "b": "2.25 ", "d": "20.25 ", "e": "21 "}, "title": "10: operators", "description": "this is truncating division.  The remainder is dropped."}, {"correct": "c", "code": "nums = set([1,1,2,3,3,3,4])\r\nprint len(nums)\r\n", "question": "What gets printed?", "choices": {"c": "4 ", "a": "1 ", "b": "2 ", "d": "5 ", "e": "7 "}, "title": "11: sets", "description": "nums is a set, so only unique values are retained."}, {"correct": "a", "code": "x = True\r\ny = False\r\nz = False\r\n\r\nif x or y and z:\r\n    print \"yes\"\r\nelse:\r\n    print \"no\"\r\n", "question": "What gets printed?", "choices": {"c": "fails to compile ", "a": "yes ", "b": "no "}, "title": "12: operator precedence", "description": "AND is higher precedence than OR in python and is evaluated first"}, {"correct": "c", "code": "x = True\r\ny = False\r\nz = False\r\n\r\nif not x or y:\r\n    print 1\r\nelif not x or not y and z:\r\n    print 2\r\nelif not x or y or not y and x:\r\n    print 3\r\nelse:\r\n    print 4\r\n", "question": "What gets printed?", "choices": {"c": "3 ", "a": "1 ", "b": "2 ", "d": "4 "}, "title": "13: operator precedence", "description": "NOT has first precedence, then AND, then OR"}, {"correct": "d", "code": "A) PYTHONPATH directory\r\nB) current directory\r\nC) home directory\r\nD) installation dependent default path", "question": "If PYTHONPATH is set in the environment, which directories are searched for modules?", "choices": {"c": "A, B, and C ", "a": "A only ", "b": "A and D ", "d": "A, B, and D ", "e": "A, B, C, and D "}, "title": "14: python path", "description": "First is the current directory, then is the PYTHONPATH directory if set, then is the installation dependent default path"}, {"correct": "b", "code": "try:\r\n  accessSecureSystem()\r\nexcept AccessError, SecurityError:\r\n  print \"error type 1\"\r\n\r\ncontinueWork()", "question": "In python 2.6 or earlier, the code will print error type 1 if accessSecureSystem raises an exception of either AccessError type or SecurityError type", "choices": {"a": "true ", "b": "false "}, "title": "15: exceptions", "description": "The except statement will only catch exceptions of type AccessError and name the exception object SecurityError.  In order to catch both you can use a tuple like this: except (AccessError, SecurityError).  Python has been changed in version 3.0 so that the syntax shown in the question will actually catch both types."}, {"correct": "b", "code": "daysOfWeek = ['Monday',\r\n              'Tuesday',\r\n              'Wednesday',\r\n              'Thursday',\r\n              'Friday',\r\n              'Saturday',\r\n              'Sunday']\r\n\r\nmonths =             ['Jan', \\\r\n                      'Feb', \\\r\n                      'Mar', \\\r\n                      'Apr', \\\r\n                      'May', \\\r\n                      'Jun', \\\r\n                      'Jul', \\\r\n                      'Aug', \\\r\n                      'Sep', \\\r\n                      'Oct', \\\r\n                      'Nov', \\\r\n                      'Dec']\r\n\r\nprint \"DAYS: %s, MONTHS %s\" % \r\n    (daysOfWeek, months)", "question": "The following code will successfully print the days and then the months", "choices": {"a": "true ", "b": "false "}, "title": "16: logical lines", "description": "daysOfWeek is ok because expressions in parentheses, square brackets or curly braces can be split over more than one physical line without using backslashes.  months is ok because backslashes are used to join physical lines, even though they are not required in this case.  The print statement will not print the data because 2 logical lines are used without a backslash to join them into a logical line."}, {"correct": "a", "code": "f = None\r\n\r\nfor i in range (5):\r\n    with open(\"data.txt\", \"w\") as f:\r\n        if i > 2:\r\n            break\r\n\r\nprint f.closed", "question": "Assuming python 2.6 what gets printed?", "choices": {"c": "None ", "a": "True ", "b": "False "}, "title": "17: file io", "description": "The WITH statement when used with open file guarantees that the file object is closed when the with block exits."}, {"correct": "c", "code": "counter = 1 \r\n\r\ndef doLotsOfStuff():\r\n    \r\n    global counter\r\n\r\n    for i in (1, 2, 3): \r\n        counter += 1\r\n\r\ndoLotsOfStuff()\r\n\r\nprint counter\r\n", "question": "What gets printed?", "choices": {"c": "4 ", "a": "1 ", "b": "3 ", "d": "7 ", "e": "none of the above "}, "title": "18: scope", "description": "the counter variable being referenced in the function is the global variable defined outside of the function.  Changes to the variable in the function affect the original variable."}, {"correct": "c", "code": "print r\"\\nwoow\"", "question": "What gets printed?", "choices": {"c": "the text like exactly like this: \\nwoow ", "a": "new line then the string: woow ", "b": "the text exactly like this: r\"\\nwoow\" ", "d": "the letter r and then newline then the text: woow ", "e": "the letter r then the text like this: nwoow "}, "title": "19: string literals", "description": "When prefixed with the letter 'r' or 'R' a string literal becomes a raw string and the escape sequences such as \\n are not converted."}, {"correct": "b", "code": "print \"hello\" 'world'", "question": "What gets printed?", "choices": {"c": "hello on one line and world on the next line ", "a": "on one line the text: hello world ", "b": "on one line the text: helloworld ", "d": "syntax error, this python program will not run "}, "title": "20: string literals", "description": "String literals seperated by white space are allowed.  They are concatenated."}, {"correct": "e", "code": "print \"\\x48\\x49!\"", "question": "What gets printed?", "choices": {"c": "4849! ", "a": "\\x48\\x49! ", "b": "4849 ", "d": "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a048\u00a0\u00a0\u00a0\u00a0\u00a0\u00a049! ", "e": "HI! "}, "title": "21: string literals", "description": "\\x is an escape sequence that means the following 2 digits are a hexadicmal number encoding a character."}, {"correct": "d", "code": "print 0xA + 0xa", "question": "What gets printed?", "choices": {"c": "14 ", "a": "0xA + 0xa ", "b": "0xA 0xa ", "d": "20 ", "e": "0x20 "}, "title": "22: integer literals", "description": "0xA and 0xa are both hexadecimal integer literals representing the decimal value 10.  Their sum is 20."}, {"correct": "e", "code": "class parent:\r\n    def __init__(self, param):\r\n        self.v1 = param\r\n\r\nclass child(parent):\r\n    def __init__(self, param):\r\n        self.v2 = param\r\n\r\nobj = child(11)\r\nprint \"%d %d\" % (obj.v1, obj.v2)", "question": "What gets printed?", "choices": {"c": "11 None ", "a": "None None ", "b": "None 11 ", "d": "11 11 ", "e": "Error is generated by program "}, "title": "23: inheritance", "description": "AttributeError: child instance has no attribute 'v1'.  self.v1 was never created as a variable since the parent __init__ was not explicitly called."}, {"correct": "e", "code": "kvps  = {\"user\",\"bill\", \"password\",\"hillary\"}\r\n\r\nprint kvps['password']", "question": "What gets printed?", "choices": {"c": "password ", "a": "user ", "b": "bill ", "d": "hillary ", "e": "Nothing. Python syntax error "}, "title": "24: dictionaries", "description": "When initializing a dictionary, key and values are seperated by colon and key-value pairs are separated by commas.kvps  = {\"user\":\"bill\", \"password\":\"hillary\"}"}, {"correct": "b", "code": "class Account:\r\n    def __init__(self, id):\r\n        self.id = id\r\n        id = 666 \r\n\r\nacc = Account(123)\r\nprint acc.id\r\n", "question": "What gets printed?", "choices": {"c": "666 ", "a": "None ", "b": "123 ", "d": "SyntaxError, this program will not run "}, "title": "25: classes", "description": "class instantiation automatically calls the __init__ method and passes the object as the self parameter.  123 is assigned to data attribute of the object called id.  The 666 value is not retained in the object as it is not assigned to a data attribute of the class/object."}, {"correct": "c", "code": "name = \"snow storm\"\r\n\r\nprint \"%s\" % name[6:8]\r\n", "question": "What gets printed?", "choices": {"c": "to ", "a": "st ", "b": "sto ", "d": "tor ", "e": "Syntax Error "}, "title": "26: string slices", "description": "This is a slice of a string from index 6 to index 8 not including index 8.  The first character in the string is position 0."}, {"correct": "d", "code": "name = \"snow storm\"\r\n\r\nname[5] = 'X'\r\n\r\nprint name\r\n", "question": "What gets printed?", "choices": {"c": "snow Xtorm ", "a": "snow storm ", "b": "snowXstorm ", "d": "ERROR, this code will not run "}, "title": "27: strings", "description": "TypeError.  You can not modify the contents of a string"}, {"correct": "c", "code": "for i in  range(2):\r\n    print i\r\n\r\nfor i in range(4,6):\r\n    print i\r\n", "question": "Which numbers are printed?", "choices": {"c": "0, 1, 4, 5 ", "a": "2, 4, 6 ", "b": "0, 1, 2, 4, 5, 6 ", "d": "0, 1, 4, 5, 6, 7, 8, 9 ", "e": "1, 2, 4, 5, 6 "}, "title": "28: range", "description": "If only 1 number is supplied to range it is the end of the range.  The default beginning of a range is 0.  The range will include the beginning of the range and all numbers up to but not including the end of the range."}, {"correct": "b", "code": "values = [1, 2, 1, 3]\r\nnums = set(values)\r\n\r\ndef checkit(num):\r\n    if num in nums:\r\n        return True\r\n    else:\r\n        return False\r\n\r\nfor i in  filter(checkit, values):\r\n    print i\r\n", "question": "What sequence of numbers is printed?", "choices": {"c": "1 2 1 3 1 2 1 3 ", "a": "1 2 3 ", "b": "1 2 1 3 ", "d": "1 1 1 1 2 2 3 3 ", "e": "Syntax Error "}, "title": "29: filter", "description": "The filter will return all items from the list values which return True when passed to the function checkit.  checkit will check if the value is in the set.  Since all the numbers in the set come from the values list, all of the orignal values in the list will return True."}, {"correct": "e", "code": "values = [2, 3, 2, 4]\r\n\r\ndef my_transformation(num):\r\n    return num ** 2\r\n\r\nfor i in  map(my_transformation, values):\r\n    print i\r\n", "question": "What sequence of numbers is printed?", "choices": {"c": "1 1.5 1 2 ", "a": "2 3 2 4 ", "b": "4 6 4 8 ", "d": "1 1 1 2 ", "e": "4 9 4 16 "}, "title": "30: map reduce", "description": "map will call the function for each value in the list.  The ** operator in the function raises the parameter to the power of 2."}, {"correct": "c", "code": "import pickle\r\n\r\nclass account:\r\n\tdef __init__(self, id, balance):\r\n\t\tself.id = id\r\n\t\tself.balance = balance\r\n\tdef deposit(self, amount):\r\n\t\tself.balance += amount\r\n\tdef withdraw(self, amount):\r\n\t\tself.balance -= amount\r\n\r\nmyac = account('123', 100)\r\nmyac.deposit(800)\r\nmyac.withdraw(500)\r\n\r\nfd = open( \"archive\", \"w\" ) \r\npickle.dump( myac, fd)\r\nfd.close()\r\n\r\nmyac.deposit(200)\r\nprint myac.balance\r\n\r\nfd = open( \"archive\", \"r\" ) \r\nmyac = pickle.load( fd )\r\nfd.close()\r\n\r\nprint myac.balance", "question": "What numbers get printed", "choices": {"c": "600 400 ", "a": "500 300 ", "b": "500 500 ", "d": "600 600 ", "e": "300 500 "}, "title": "31: pickle", "description": "pickle will store the state of the account object to file when its value is 400.  After storing the value to file 200 is added and 600 is printed.  After printing 600 the object form file is reloaded from file and printed with a value of 400."}, {"correct": "b", "code": "import math\r\n\r\nprint math.floor(5.5)\r\n", "question": "What gets printed by the code snippet below?", "choices": {"c": "5.5 ", "a": "5 ", "b": "5.0 ", "d": "6 ", "e": "6.0 "}, "title": "32: floor method", "description": "the floor method will return the largest integer value less than or equal to the parameter as a float type."}, {"correct": "e", "code": "class Person:\r\n    def __init__(self, id):\r\n        self.id = id\r\n\r\nobama = Person(100)\r\n\r\nobama.__dict__['age'] = 49\r\n\r\nprint obama.age + len(obama.__dict__)", "question": "What gets printed by the code below?", "choices": {"c": "49 ", "a": "1 ", "b": "2 ", "d": "50 ", "e": "51 "}, "title": "33: classes", "description": "We have created a member variable named 'age' by adding it directly the objects dictionary.  The value of 'age' is initialized to 49.  There are 2 items in the dictionary, 'age' and 'id', therefore the sum of the 'age' value 49 and then size of the dictionary, 2 items, is 51."}, {"correct": "e", "code": "x = \"foo \"\r\ny = 2\r\nprint x + y\r\n", "question": "What gets printed?", "choices": {"c": "foo 2 ", "a": "foo ", "b": "foo foo ", "d": "2 ", "e": "An exception is thrown "}, "title": "34: types", "description": "Python is a strongly typed language.  Once a variable has a type, it must be casted to change the type.  x is a string and y is an integer.  Trying to concatenate them will cause an exception of type TypeError"}, {"correct": "e", "code": "def simpleFunction():\r\n    \"This is a cool simple function that returns 1\"\r\n    return 1\r\n\r\nprint simpleFunction.__doc__[10:14]\r\n", "question": "What gets printed?", "choices": {"c": "func ", "a": "simpleFunction ", "b": "simple ", "d": "funtion ", "e": "cool "}, "title": "35: docstrings", "description": "There is a docstring defined for this method, by putting a string on the first line after the start of the function definition.  The docstring can be referenced using the __doc__ attribute of the function."}, {"correct": "c", "code": "sys.path.append('/root/mods')", "question": "What does the code below do?", "choices": {"c": "Adds a new directory to seach for python modules that are imported ", "a": "Changes the location that the python executable is run from ", "b": "Changes the current working directory ", "d": "Removes all directories for mods ", "e": "Changes the location where sub-processes are searched for after they are launched "}, "title": "36: paths", "description": "The list sys.path contains, in order, all the directories to be searched when trying to load a module"}, {"correct": "c", "code": "import re\r\nsum = 0\r\n\r\npattern = 'back'\r\nif re.match(pattern, 'backup.txt'):\r\n    sum += 1\r\nif re.match(pattern, 'text.back'):\r\n    sum += 2\r\nif re.search(pattern, 'backup.txt'):\r\n    sum += 4\r\nif re.search(pattern, 'text.back'):\r\n    sum += 8\r\n\r\nprint sum", "question": "What gets printed?", "choices": {"c": "13 ", "a": "3 ", "b": "7 ", "d": "14 ", "e": "15 "}, "title": "37: regex", "description": "search will see if the pattern exists anywhere in the string, while match will only check if the pattern exists in the beginning of the string."}, {"correct": "a", "code": "names = ['Ramesh', 'Rajesh', 'Roger', 'Ivan', 'Nico']\r\n", "question": "Which of the following print statements will print all the names in the list on a seperate line", "choices": {"c": "print names.concatenate(\"\\n\")  ", "a": "print \"\\n\".join(names)  ", "b": "print names.join(\"\\n\")  ", "d": "print names.append(\"\\n\") ", "e": "print names.join(\"%s\\n\", names) "}, "title": "38: string methods", "description": "Only A is valid syntax.\r\n\r\nThere is a join method to string objects which takes an iterable object as parameter and combines the string calling the method in between each item to produce a resulting string."}, {"correct": "b", "code": "if error:\r\n    # four spaces of indent are used to create the block\r\n    print \"%s\" % msg", "question": "True or false?  Code indentation must be 4 spaces when creating a code block?", "choices": {"a": "True ", "b": "False "}, "title": "39: indentation", "description": "This is false.  Indentation needs to be consistent. A specific number of spaces used for indentation is not prescribed by the language."}, {"correct": "d", "code": "class Person:\r\n    def __init__(self):\r\n        pass\r\n\r\n    def getAge(self):\r\n        print __name__\r\n\r\np = Person()\r\np.getAge()\r\n", "question": "Assuming the filename for the code below is /usr/lib/python/person.py and the program is run as", "choices": {"c": "usr.lib.python.person ", "a": "Person ", "b": "getAge ", "d": "__main__ ", "e": "An exception is thrown "}, "title": "40: special variables", "description": "If the module where the reference to __name__ is made has been imported from another file, then the module name will be in the variable in the form of the filename without the path or file extension.  If the code is being run NOT as the result of an import, the variable will have the special value \"__main__\"."}, {"correct": "b", "code": "foo = {}\r\nprint type(foo)\r\n", "question": "What gets printed", "choices": {"c": "list ", "a": "set ", "b": "dict ", "d": "tuple ", "e": "object "}, "title": "41: types", "description": "Curly braces are the syntax for a dictionary declaration"}, {"correct": "c", "code": "foo = (3, 4, 5)\r\nprint type(foo)\r\n", "question": "What gets printed?", "choices": {"c": "tuple ", "a": "int ", "b": "list ", "d": "dict ", "e": "set "}, "title": "42: types", "description": "Parentheses are used to initialize a tuple."}, {"correct": "d", "code": "country_counter = {}\r\n\r\ndef addone(country):\r\n    if country in country_counter:\r\n        country_counter[country] += 1\r\n    else:\r\n        country_counter[country] = 1\r\n\r\naddone('China')\r\naddone('Japan')\r\naddone('china')\r\n\r\nprint len(country_counter)", "question": "What gets printed?", "choices": {"c": "2 ", "a": "0 ", "b": "1 ", "d": "3 ", "e": "4 "}, "title": "43: dictionary", "description": "The len function will return the number of keys in a dictionary.  In this case 3 items have been added to the dictionary.  Note that the key's to a dictionary are case sensitive."}, {"correct": "d", "code": "confusion = {}\r\nconfusion[1] = 1\r\nconfusion['1'] = 2\r\nconfusion[1] += 1\r\n\r\nsum = 0\r\nfor k in confusion:\r\n    sum += confusion[k]\r\n\r\nprint sum", "question": "What gets printed?", "choices": {"c": "3 ", "a": "1 ", "b": "2 ", "d": "4 ", "e": "5 "}, "title": "44: dictionary", "description": "Note that keys to a dictionary can be mixed between strings and integers and they represent different keys."}, {"correct": "c", "code": "confusion = {}\r\nconfusion[1] = 1\r\nconfusion['1'] = 2\r\nconfusion[1.0] = 4\r\n\r\nsum = 0\r\nfor k in confusion:\r\n    sum += confusion[k]\r\n\r\nprint sum", "question": "What gets printed?", "choices": {"c": "6 ", "a": "2 ", "b": "4 ", "d": "7 ", "e": "An exception is thrown "}, "title": "45: dictionary", "description": "Note from python docs: \"if two numbers compare equal (such as 1 and 1.0) then they can be used interchangeably to index the same dictionary entry. (Note however, that since computers store floating-point numbers as approximations it is usually unwise to use them as dictionary keys.)\""}, {"correct": "e", "code": "boxes = {}\r\njars = {}\r\ncrates = {}\r\n\r\nboxes['cereal'] = 1\r\nboxes['candy'] = 2\r\njars['honey'] = 4\r\ncrates['boxes'] = boxes\r\ncrates['jars'] = jars\r\n\r\nprint len(crates[boxes])", "question": "What gets printed?", "choices": {"c": "4 ", "a": "1 ", "b": "2 ", "d": "7 ", "e": "An exception is thrown "}, "title": "46: dictionary", "description": "Keys can only be immutable types, so a dictionary can not be used as a key.  In the print statement the dictionary is used as the key instead of the string 'boxes'.  Had the string been used it would have printed the length of the boxes dictionary which is 2."}, {"correct": "e", "code": "numberGames = {}\r\nnumberGames[(1,2,4)] = 8\r\nnumberGames[(4,2,1)] = 10\r\nnumberGames[(1,2)] = 12\r\n\r\nsum = 0\r\nfor k in numberGames:\r\n    sum += numberGames[k]\r\n\r\nprint len(numberGames) + sum", "question": "What gets printed?", "choices": {"c": "24 ", "a": "8 ", "b": "12 ", "d": "30 ", "e": "33 "}, "title": "47: dictionary tuple", "description": "Tuples can be used for keys into dictionary.  The tuples can have mixed length and the order of the items in the tuple is considered when comparing the equality of the keys."}, {"correct": "a", "code": "foo = {1:'1', 2:'2', 3:'3'}\r\nfoo = {}\r\nprint len(foo)\r\n", "question": "What gets printed?", "choices": {"c": "2 ", "a": "0 ", "b": "1 ", "d": "3 ", "e": "An exception is thrown "}, "title": "48: dictionary", "description": "after the second line of code, foo is an empty dictionary.  The proper way to actually remove all items from a dictionary is to call the 'clear' method of the dictionary object"}, {"correct": "b", "code": "foo = {1:'1', 2:'2', 3:'3'}\r\ndel foo[1]\r\nfoo[1] = '10'\r\ndel foo[2]\r\nprint len(foo)\r\n", "question": "What gets printed?", "choices": {"c": "3 ", "a": "1 ", "b": "2 ", "d": "4 ", "e": "An exception is thrown "}, "title": "49: dictionary", "description": "The del function is used to remove key value pairs from a dictionary."}, {"correct": "e", "code": "names = ['Amir', 'Barry', 'Chales', 'Dao']\r\nprint names[-1][-1]\r\n", "question": "What gets printed?", "choices": {"c": "Amir ", "a": "A ", "b": "r ", "d": "Dao ", "e": "o "}, "title": "50: lists", "description": "-1 refers to the last position in a list or the last character in a string.\r\n\r\nIn this case, we are referencing the last character in the last string in the list."}, {"correct": "b", "code": "names1 = ['Amir', 'Barry', 'Chales', 'Dao']\r\nnames2 = names1\r\nnames3 = names1[:]\r\n\r\nnames2[0] = 'Alice'\r\nnames3[1] = 'Bob'\r\n\r\nsum = 0\r\nfor ls in (names1, names2, names3):\r\n    if ls[0] == 'Alice':\r\n        sum += 1\r\n    if ls[1] == 'Bob':\r\n        sum += 10\r\n\r\nprint sum", "question": "What gets printed?", "choices": {"c": "21 ", "a": "11 ", "b": "12 ", "d": "22 ", "e": "33 "}, "title": "51: list references", "description": "When assigning names1 to names2, we create a second reference to the same list.  Changes to names2 affect names1.\r\n\r\nWhen assigning the slice of all elements in names1 to names3, we are creating a full copy of names1 which can be modified independently."}, {"correct": "e", "code": "names1 = ['Amir', 'Barry', 'Chales', 'Dao']\r\n\r\nloc = names1.index(\"Edward\")\r\n\r\nprint loc", "question": "What gets printed?", "choices": {"c": "4 ", "a": "-1 ", "b": "0 ", "d": "Edward ", "e": "An exception is thrown "}, "title": "52: searching lists", "description": "If index can not find the specified value in the list an exception is thrown."}, {"correct": "b", "code": "names1 = ['Amir', 'Barry', 'Chales', 'Dao']\r\n\r\nif 'amir' in names1:\r\n    print 1\r\nelse:\r\n    print 2", "question": "What gets printed?", "choices": {"c": "An exception is thrown ", "a": "1 ", "b": "2 "}, "title": "53: searching lists", "description": "the in keyword can be used to search for a value in a list, set, or dict.  In this case the search fails, because the string value is case sensitive."}, {"correct": "c", "code": "names1 = ['Amir', 'Barry', 'Chales', 'Dao']\r\nnames2 = [name.lower() for name in names1]\r\n\r\nprint names2[2][0]", "question": "What gets printed?", "choices": {"c": "c ", "a": "i ", "b": "a ", "d": "C ", "e": "An exception is thrown "}, "title": "54: list comprehensions", "description": "List Comprehensions are a shorthand to creating a new list with the all the values in a original list modified by some python expression."}, {"correct": "b", "code": "numbers = [1, 2, 3, 4]\r\n\r\nnumbers.append([5,6,7,8])\r\n\r\nprint len(numbers)", "question": "What gets printed?", "choices": {"c": "8 ", "a": "4 ", "b": "5 ", "d": "12 ", "e": "An exception is thrown "}, "title": "55: list methods", "description": "When a list is passed to the append method of list, the entire list is added as an element of the list.  The lists are not merged."}, {"correct": "e", "code": null, "question": "Which of the following data structures can be used with the \"in\" operator to check if an item is in the data structure?", "choices": {"c": "dictionary ", "a": "list ", "b": "set ", "d": "None of the above ", "e": "All of the above "}, "title": "56: searching", "description": "The \"in\" operator can be used with all 3 of these data structures."}, {"correct": "d", "code": "list1 = [1, 2, 3, 4]\r\nlist2 = [5, 6, 7, 8]\r\n\r\nprint len(list1 + list2)\r\n", "question": "What gets printed?", "choices": {"c": "5 ", "a": "2 ", "b": "4 ", "d": "8 ", "e": "An exception is thrown "}, "title": "57: list methods", "description": "The + operator appends the elements in each list into a new list"}, {"correct": "c", "code": "def addItem(listParam):\r\n    listParam += [1]\r\n\r\nmylist = [1, 2, 3, 4]\r\naddItem(mylist)\r\nprint len(mylist)\r\n", "question": "What gets printed?", "choices": {"c": "5 ", "a": "1 ", "b": "4 ", "d": "8 ", "e": "An exception is thrown "}, "title": "58: function parameters", "description": "The list is passed by reference to the function and modifications to the function parameter also effect the original list."}, {"correct": "e", "code": "my_tuple = (1, 2, 3, 4)\r\nmy_tuple.append( (5, 6, 7) )\r\nprint len(my_tuple)\r\n", "question": "What gets printed?", "choices": {"c": "5 ", "a": "1 ", "b": "2 ", "d": "7 ", "e": "An exception is thrown "}, "title": "59: tuple methods", "description": "Tuples are immutable and don't have an append method.  An exception is thrown in this case."}, {"correct": "b", "code": "a = 1\r\nb = 2\r\na,b = b,a\r\n\r\nprint \"%d %d\" % (a,b)\r\n", "question": "What gets printed?", "choices": {"c": "An exception is thrown ", "a": "1 2 ", "b": "2 1 ", "d": "This program has undefined behavior "}, "title": "60: multiple variable assignment", "description": "This is valid python code.   This is assignment multiple variables at once.  The values in b and a are being assigned to a and b, respectively."}, {"correct": "a", "code": "def print_header(str):\r\n    print \"+++%s+++\" % str\r\n\r\n\r\nprint_header.category = 1\r\nprint_header.text = \"some info\"\r\n\r\nprint_header(\"%d %s\" %  \\\r\n(print_header.category, print_header.text))\r\n\r\n", "question": "What gets printed?", "choices": {"c": "1 ", "a": "+++1 some info+++ ", "b": "+++%s+++ ", "d": "1 ", "e": "some info "}, "title": "61: function attributes", "description": "As of python 2.1 you could assign arbitrary typed information to functions."}, {"correct": "c", "code": "def dostuff(param1, *param2):\r\n   print type(param2)\r\n\r\ndostuff('apples', 'bananas', 'cherry', 'dates')\r\n", "question": "What gets printed?", "choices": {"c": "tuple ", "a": "str ", "b": "int ", "d": "list ", "e": "dict "}, "title": "62: function arguments", "description": "param2 aggregates remaining parameters into a tuple."}, {"correct": "e", "code": "def dostuff(param1, **param2):\r\n   print type(param2)\r\n\r\n\r\ndostuff('capitals', Arizona='Phoenix',\r\nCalifornia='Sacramento', Texas='Austin')\r\n", "question": "What gets printed?", "choices": {"c": "tuple ", "a": "in ", "b": "str ", "d": "list ", "e": "dict "}, "title": "63: function arguments", "description": "param2 aggregates the remaining parameters into a dictionary."}, {"correct": "b", "code": "def myfunc(x, y, z, a):\r\n    print x + y\r\n\r\nnums = [1, 2, 3, 4]\r\n\r\nmyfunc(*nums)\r\n", "question": "What gets printed?", "choices": {"c": "6 ", "a": "1 ", "b": "3 ", "d": "10 ", "e": "An exception is thrown "}, "title": "64: unpacking argument lists", "description": "*nums will unpack the list into individual elements to be passed to the function."}, {"correct": "c", "code": "p = mytools.myparser.MyParser()", "question": "How do you create a package so that the following reference will work?", "choices": {"c": "Inside the mytools dir create a __init__.py and myparser.py ", "a": "Declare the myparser package in mytools.py ", "b": "Create an __init__.py in the home dir ", "d": "Create a myparser.py directory inside the mytools directory ", "e": "This can not be done "}, "title": "65: packages", "description": "In order to create a package create a directory for the package name and then put an __init__.py file in te directory."}, {"correct": "e", "code": "class A:\r\n    def __init__(self, a, b, c):\r\n        self.x = a + b + c\r\n\r\na = A(1,2,3)\r\nb = getattr(a, 'x')\r\nsetattr(a, 'x', b+1)\r\nprint a.x", "question": "What gets printed?", "choices": {"c": "3 ", "a": "1 ", "b": "2 ", "d": "6 ", "e": "7 "}, "title": "66: getattr", "description": "getattr can be used to get the value of a member variable of an object.  setattr can be used to set it."}, {"correct": "e", "code": "class NumFactory:\r\n    def __init__(self, n):\r\n        self.val = n\r\n    def timesTwo(self):\r\n        self.val *= 2\r\n    def plusTwo(self):\r\n        self.val += 2\r\n\r\nf = NumFactory(2)\r\nfor m in dir(f):\r\n    mthd = getattr(f,m)\r\n    if callable(mthd):\r\n        mthd()\r\n\r\nprint f.val\r\n", "question": "What gets printed?", "choices": {"c": "6 ", "a": "2 ", "b": "4 ", "d": "8 ", "e": "An exception is thrown "}, "title": "67: callable", "description": "An exception will be thrown when trying to call the __init__ method of the object without any parameters:\r\n\r\nTypeError: __init__() takes exactly 2 arguments (1 given)"}, {"correct": "a", "code": "one = chr(104)\r\ntwo = chr(105)\r\nprint \"%s%s\" % (one, two)\r\n", "question": "What gets printed?", "choices": {"c": "None ", "a": "hi ", "b": "h ", "d": "104105 ", "e": "104 "}, "title": "68: ascii", "description": "chr is a built in function that converts an ascii code to a 1 letter string."}, {"correct": "a", "code": "x = 0\r\ny = 1\r\n\r\na = cmp(x,y)\r\nif a ", "question": "Assuming python 2.x, what gets printed?", "choices": {"c": "c ", "a": "a ", "b": "b "}, "title": "69: cmp", "description": "cmp returns a value less than 0 if x is less than y.\r\n\r\ncmp returns 0 if x equals y.\r\n\r\ncmp returns a value greater than 0 if x is greater than y."}, {"correct": "c", "code": "x = 1\r\ny = \"2\"\r\nz = 3\r\n\r\nsum = 0\r\nfor i in (x,y,z):\r\n    if isinstance(i, int):\r\n        sum += i\r\nprint sum", "question": "What gets printed?", "choices": {"c": "4 ", "a": "2 ", "b": "3 ", "d": "6 ", "e": "An exception is thrown "}, "title": "70: isinstance", "description": "isinstance will return true if the first parameter is an instance of the class type of the second parameter."}, {"correct": "d", "code": "a = input(\"#: \")\r\n\r\nprint a", "question": "What gets printed (with python version 2.X) assuming the user enters the following at the prompt?\r\n#", "choices": {"c": "#: foo ", "a": "f ", "b": "foo ", "d": "An exception is thrown "}, "title": "71: input", "description": "The input function is equivalent to:\r\n\r\neval(raw_input(prompt))\r\n\r\nThis function will attempt to execute the text tempted at the prompt as python code.  In the case of this input, invalid python code was entered an exception is thrown"}, {"correct": "c", "code": "x = sum(range(5))\r\nprint x\r\n", "question": "What gets printed?", "choices": {"c": "10 ", "a": "4 ", "b": "5 ", "d": "15 ", "e": "An exception is thrown "}, "title": "72: sum", "description": "range(5) produces a list of the numbers 0, 1, 2, 3, 4.\r\nsum will add all the numbers in the list."}, {"correct": "b", "code": "def getinput():\r\n    print \"0: start\"\r\n    print \"1: stop\"\r\n    print \"2: reset\"\r\n    x = raw_input(\"selection: \")\r\n    try:\r\n        num = int(x)\r\n        if num > 2 or num ", "question": "If the user types '0' at the prompt what gets printed?", "choices": {"c": "An exception is thrown ", "a": "valid ", "b": "invalid "}, "title": "73: truth testing", "description": "0 is returned from getinput.   Remember that both 0, None, empty sequences and some other forms all evaluate to False in truth testing."}, {"correct": "d", "code": "kvps = { '1' : 1, '2' : 2 }\r\ntheCopy = kvps\r\n\r\nkvps['1'] = 5\r\n\r\nsum = kvps['1'] + theCopy['1']\r\nprint sum", "question": "What gets printed?", "choices": {"c": "7 ", "a": "1 ", "b": "2 ", "d": "10 ", "e": "An exception is thrown "}, "title": "74: dictionary copy", "description": "Assignment will provide another reference to the same dictionary.  Therefore the change to the original dictionary also is changing the copy."}, {"correct": "c", "code": "kvps = { '1' : 1, '2' : 2 }\r\ntheCopy = kvps.copy()\r\n\r\nkvps['1'] = 5\r\n\r\nsum = kvps['1'] + theCopy['1']\r\nprint sum", "question": "What gets printed?", "choices": {"c": "6 ", "a": "1 ", "b": "2 ", "d": "10 ", "e": "An exception is thrown "}, "title": "75: dictionary copy", "description": "The copy method of the dictionary will make a new (shallow) copy of the dictionary so a change to the original in this case does not change the copy."}, {"correct": "d", "code": "aList = [1,2]\r\nbList = [3,4]\r\n\r\nkvps = { '1' : aList, '2' : bList }\r\ntheCopy = kvps.copy()\r\n\r\nkvps['1'][0] = 5\r\n\r\nsum = kvps['1'][0] + theCopy['1'][0]\r\nprint sum", "question": "What gets printed", "choices": {"c": "6 ", "a": "1 ", "b": "2 ", "d": "10 ", "e": "An exception is thrown "}, "title": "76: dictionary copy", "description": "The copy method provides a shallow copy therefore the list being held as the value inside the dictionary is the same list in the copy as the original."}, {"correct": "c", "code": "import copy\r\n\r\naList = [1,2]\r\nbList = [3,4]\r\n\r\nkvps = { '1' : aList, '2' : bList }\r\ntheCopy = copy.deepcopy(kvps)\r\n\r\nkvps['1'][0] = 5\r\n\r\nsum = kvps['1'][0] + theCopy['1'][0]\r\nprint sum", "question": "What gets printed?", "choices": {"c": "6 ", "a": "1 ", "b": "2 ", "d": "10 ", "e": "An exception is thrown "}, "title": "77: dictionary copy", "description": "A deep copy will copy all the keys and values inside a dictionary.  Therefore the list inside the dictionary are different in the first and second dictionaries of this example."}, {"correct": "c", "code": "kvps = { '1' : 1, '2' : 2 }\r\ntheCopy = dict(kvps)\r\n\r\nkvps['1'] = 5\r\n\r\nsum = kvps['1'] + theCopy['1']\r\nprint sum", "question": "What gets printed?", "choices": {"c": "6 ", "a": "1 ", "b": "2 ", "d": "10 ", "e": "An exception is thrown "}, "title": "78: dictionary copy", "description": "Creating a new dictionary object initialized from the first does a 'shallow copy'"}, {"correct": "b", "code": "kvps = { '1' : 1, '2' : 2 , '3' : 3, '4' : 4, '5' : 5}\r\nnewData = { '1' : 10, '3' : 30 }\r\n\r\nkvps.update(newData)\r\n\r\nx = sum(kvps.values())\r\n\r\nprint x", "question": "What gets printed?", "choices": {"c": "150 ", "a": "15 ", "b": "51 ", "d": "An exception is thrown "}, "title": "79: dictionary update", "description": "the update method of dictionary will update the values that have the same keys as the newData with newData's values."}, {"correct": "b", "code": "a = input(\"#: \")\r\n\r\nprint a", "question": "What gets printed (with python version 3.X) assuming the user enters the following at the prompt?\r\n#", "choices": {"c": "Not a number ", "a": "f ", "b": "foo ", "d": "An exception is thrown "}, "title": "80: input", "description": "The input function in python 3.x is the same as the raw_input function in python 2.x.\r\nTherefore foo will be assigned to 'a' and printed."}]